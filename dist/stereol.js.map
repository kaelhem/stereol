{"version":3,"file":"stereol.js","sources":["../src/ascii-stl.js","../src/colors.js","../src/binary-stl.js","../src/index.js"],"sourcesContent":["const trim = (a) => {\n  let nullTerm = a.indexOf('\\u0000')\n  if (nullTerm > -1) {\n    a = a.substr(0, nullTerm)\n  }\n  return a.trim()\n}\n\nconst exp = (x, y, z) => ([x, y, z].map(x => x.toExponential()))\n\nconst asciiFacet = (n, v) => (\n`facet normal ${exp(...n).join(' ')}\n  outer loop\n    vertex ${exp(...v[0]).join(' ')}\n    vertex ${exp(...v[1]).join(' ')}\n    vertex ${exp(...v[2]).join(' ')}\n  endloop\nendfacet\n`)\n\nexport const toASCII = (facets, description = '') => {\n  let str = 'solid ' + description.split(' COLOR=')[0].trim() + '\\n'\n  for (let j = 0; j < facets.length; j++) {\n    const facet = facets[j]\n    const v = facet.verts\n    const n = facet.normal || computeNormal(v)\n    str += asciiFacet(n, v)\n  }\n  str += 'endsolid'\n  return str\n}\n\nexport const fromASCII = (data) => {\n  const [desc, ...lines] = data.split('\\n').filter(x => x.trim() !== '')\n  const facets = []\n  let lineIndex = 0\n  let broken = false\n  while (!broken && lineIndex < lines.length && lines[lineIndex].indexOf('endsolid') === -1) {\n    broken = lines.length < lineIndex + 6\n    broken = broken || lines[lineIndex].indexOf('normal ') === -1\n    broken = broken || lines[lineIndex + 2].indexOf('vertex ') === -1\n    broken = broken || lines[lineIndex + 3].indexOf('vertex ') === -1\n    broken = broken || lines[lineIndex + 4].indexOf('vertex ') === -1\n    if (!broken) {\n      facets.push({\n        normal: lines[lineIndex].split('normal ')[1].trim().split(' ').map(x => parseFloat(x)),\n        verts: [\n          lines[lineIndex + 2].split('vertex ')[1].trim().split(' ').map(x => parseFloat(x)),\n          lines[lineIndex + 3].split('vertex ')[1].trim().split(' ').map(x => parseFloat(x)),\n          lines[lineIndex + 4].split('vertex ')[1].trim().split(' ').map(x => parseFloat(x))\n        ]\n      })\n      lineIndex += 7\n    }\n  }\n  if (broken) {\n    throw new Error('This file is not formatted correctly.')\n  }\n  return {\n    description : desc.slice(6),\n    facets\n  }\n}","const limited = (value, max = 0xFF) => Math.max(0, Math.min(max, parseInt(value, 10)))\nconst facetColorPart = (part) => limited(part, 31).toString(2).padStart(5, '0')\nconst stlColorPart = (part) => limited(part).toString(2).padStart(8, '0')\n\nexport default {\n  /*\n  Computes a 16 bits BGR color with this format: \n  bits 0 to 4 are the intensity level for blue (0 to 31),\n  bits 5 to 9 are the intensity level for green (0 to 31),\n  bits 10 to 14 are the intensity level for red (0 to 31),\n  bit 15 is 1 if the color is valid, or 0 if the color is not valid (as with normal STL files).\n  */\n  getFacetColor: ([r, g, b]) => Number(`0b${ facetColorPart(b) }${ facetColorPart(g) }${ facetColorPart(r) }1`),\n\n  /* Computes a 32 bits RGBA color */\n  getStlColor: ([r, g, b, a]) => Number(`0b${ stlColorPart(r) }${ stlColorPart(g) }${ stlColorPart(b) }${ stlColorPart(a) }`),\n}","import Colors from './colors'\n\nlet IS_NODEJS = undefined\ntry {\n  IS_NODEJS = Boolean(Buffer)\n} catch (e) {\n  IS_NODEJS = false\n}\n\nconst writeBufferString = (buffer, value = '', offset = 0) => {\n  let step = 0\n  value.split('').forEach(char => {\n    buffer.setUint8(offset + step, char.charCodeAt(0))\n    ++step\n  })\n}\n\nconst createBuffer = (size) => {\n  const buffer = IS_NODEJS ? Buffer.alloc(size) : new DataView(new ArrayBuffer(size))\n  if (IS_NODEJS) {\n    buffer.fill(0, 0, 80)\n  }\n  return {\n    writeBuffer: (type, value, offset = 0) => {\n      switch (type) {\n        case 'uint8': return IS_NODEJS ? buffer.writeUInt8(value, offset) : buffer.setUint8(offset, value)\n        case 'uint16': return IS_NODEJS ? buffer.writeUInt16LE(value, offset) : buffer.setUint16(offset, value, true)\n        case 'uint32': return IS_NODEJS ? buffer.writeUInt32LE(value, offset) : buffer.setUint32(offset, value, true)\n        case 'float': return IS_NODEJS ? buffer.writeFloatLE(value, offset) : buffer.setFloat32(offset, value, true)\n        case 'string': return IS_NODEJS ? buffer.write(value, offset) : writeBufferString(buffer, value, offset)\n        default: {\n          throw new Error('No type specified')\n        }\n      }\n    },\n    getBuffer: () => IS_NODEJS ? buffer : buffer.buffer\n  }\n}\n\nconst readBuffer = (buffer, type, offset = 0) => {\n  switch (type) {\n    case 'uint8': return IS_NODEJS ? buffer.readUInt8(offset) : buffer.getUint8(offset)\n    case 'uint16': return IS_NODEJS ? buffer.readUInt16LE(offset) : buffer.getUint16(offset, true)\n    case 'uint32': return IS_NODEJS ? buffer.readUInt32LE(offset) : buffer.getUint32(offset, true)\n    case 'float': return IS_NODEJS ? buffer.readFloatLE(offset) : buffer.getFloat32(offset, true)\n    default: {\n      throw new Error('No type specified')\n    }\n  }\n}\n\nexport const toBinary = (facets, description, color, material) => {\n  const count = facets.length\n  const size = 84 + count * 12 * 4 + count * 2\n  const { writeBuffer, getBuffer } = createBuffer(size)\n  writeBuffer('string', description)\n  if (color) {\n    writeBuffer('string', ' COLOR=', 47)\n    const [r, g, b, a] = color\n    writeBuffer('uint8', r, 54)\n    writeBuffer('uint8', g, 55)\n    writeBuffer('uint8', b, 56)\n    writeBuffer('uint8', a, 57)\n    if (material) {\n      writeBuffer('string', ',MATERIAL=', 58)\n      const [ diffuse, specular, ambient ] = material\n      writeBuffer('uint32', Colors.getStlColor(diffuse), 68)\n      writeBuffer('uint32', Colors.getStlColor(specular), 72)\n      writeBuffer('uint32', Colors.getStlColor(ambient), 76)\n    }\n  }\n  writeBuffer('uint32', count, 80)\n\n  let offset = 84\n  const write = (value) => {\n    writeBuffer('float', value, offset)\n    offset += 4\n  }\n  for (let j = 0; j<facets.length; j++) {\n    const facet = facets[j]\n    const n = facet.normal || computeNormal(facet.verts)\n    write(n[0])\n    write(n[1])\n    write(n[2])\n    for (var i = 0; i<facet.verts.length; i++) {\n      const vert = facet.verts[i]\n      write(vert[0])\n      write(vert[1])\n      write(vert[2])\n    }\n    const facetColor = facet.color ? Colors.getFacetColor(facet.color) : 0\n    writeBuffer('uint16', facetColor, offset)\n    offset += 2\n  }\n  return getBuffer()\n}\n\nexport const fromBinary = (data) => {\n  const buffer = IS_NODEJS ? Buffer.from(data) : new DataView(data)\n\n  // retrieve description\n  let header = []\n  for (let i = 0; i < 80; ++i) {\n    header.push(readBuffer(buffer, 'uint8', i))\n  }\n  const description = String.fromCharCode(...header)\n\n  // retrieve main color\n  const colorIndex = description.indexOf(' COLOR=')\n  let color = null\n  if (colorIndex !== -1) {\n    color = [\n      readBuffer(buffer, 'uint8', colorIndex + 7),\n      readBuffer(buffer, 'uint8', colorIndex + 8),\n      readBuffer(buffer, 'uint8', colorIndex + 9),\n      readBuffer(buffer, 'uint8', colorIndex + 10)\n    ]\n  }\n\n  // retrieve material\n  const materialIndex = description.indexOf('MATERIAL=')\n  let material = null\n  if (materialIndex !== -1) {\n    material = [\n      readBuffer(buffer, 'uint32', colorIndex + 9),\n      readBuffer(buffer, 'uint32', colorIndex + 13),\n      readBuffer(buffer, 'uint32', colorIndex + 17)\n    ]\n  }\n\n  // retrieve facets\n  const facets = []\n  const countFacets = readBuffer(buffer, 'uint32', 80)\n  let headIndex = 84\n  const read = () => {\n    headIndex += 4\n    return readBuffer(buffer, 'float', headIndex - 4)\n  }\n  for (let i = 0; i < countFacets; ++i) {\n    const normal = [read(), read(), read()]\n    const verts = [\n      [read(), read(), read()],\n      [read(), read(), read()],\n      [read(), read(), read()]\n    ]\n    const facetColor = readBuffer(buffer, 'uint16', headIndex)\n    headIndex += 2\n    facets.push({\n      normal,\n      verts,\n      color: facetColor\n    })\n  }\n  return {\n    description,\n    facets,\n    color,\n    material\n  }\n}","import { computeNormal } from './stl-utils'\nimport { toASCII, fromASCII } from './ascii-stl'\nimport { toBinary, fromBinary } from './binary-stl'\n\nconst exportStl = (facets, options = {}) => {\n  const {\n    description = '',\n    binary = true,\n    color = null,\n    material = null\n  } = options\n  if (binary) {\n    // colors exists only in unofficials specs and are exclusive to binary file format\n    // more details: https://en.wikipedia.org/wiki/STL_(file_format)#Color_in_binary_STL\n    const stlColor = Array.isArray(color) && color.length === 4 ? color : null\n    let stlMaterial = stlColor && Array.isArray(material) && material.length === 3 ? material : null\n    if (stlMaterial) {\n      const [a,b,c] = material\n      stlMaterial = stlMaterial && Array.isArray(a) && a.length === 3 ? material : null\n      stlMaterial = stlMaterial && Array.isArray(b) && b.length === 3 ? material : null\n      stlMaterial = stlMaterial && Array.isArray(c) && c.length === 3 ? material : null\n    }\n    return toBinary(facets, description, stlColor, stlMaterial)\n  } else {\n    return toASCII(facets, description)\n  }\n}\n\nconst arrayBufferToString = (ab) => {\n  const decoder = new TextDecoder()\n  return decoder.decode(ab)\n}\n\nconst importStl = (data) => {\n  if (typeof data === 'string' && data.slice(0, 6) === 'solid ') {\n    console.log('type: ascii string')\n    return fromASCII(data)\n  } else if (typeof(TextEncoder) !== 'undefined' && typeof data === 'object' && arrayBufferToString(data.slice(0, 6)) === 'solid ') {\n    console.log('type: ascii string in ArrayBuffer (browser only)')\n    return fromASCII(arrayBufferToString(data))\n  } else if (typeof(TextEncoder) === 'undefined' && typeof data === 'object' && data.toString().slice(0, 6) === 'solid ') {\n    console.log('type: ascii string in Buffer (nodeJS only)')\n    return fromASCII(data.toString())\n  } else {\n    console.log('type: binary buffer')\n    return fromBinary(data)\n  }\n}\n\nexport default {\n  exportStl,\n  importStl\n}\n"],"names":["exp","x","y","z","map","toExponential","asciiFacet","n","v","join","fromASCII","data","split","filter","trim","desc","lines","facets","lineIndex","broken","length","indexOf","push","normal","parseFloat","verts","Error","description","slice","limited","value","max","Math","min","parseInt","facetColorPart","part","toString","padStart","stlColorPart","r","g","Number","b","a","IS_NODEJS","undefined","Boolean","Buffer","e","readBuffer","buffer","type","offset","readUInt8","getUint8","readUInt16LE","getUint16","readUInt32LE","getUint32","readFloatLE","getFloat32","arrayBufferToString","ab","TextDecoder","decode","exportStl","options","binary","color","material","stlColor","Array","isArray","stlMaterial","c","count","size","alloc","DataView","ArrayBuffer","fill","writeBuffer","writeUInt8","setUint8","writeUInt16LE","setUint16","writeUInt32LE","setUint32","writeFloatLE","setFloat32","write","step","forEach","char","charCodeAt","writeBufferString","getBuffer","createBuffer","specular","ambient","Colors","j","facet","computeNormal","i","vert","facetColor","toBinary","str","toASCII","importStl","console","log","TextEncoder","from","header","String","fromCharCode","colorIndex","countFacets","headIndex","read","fromBinary"],"mappings":"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"}